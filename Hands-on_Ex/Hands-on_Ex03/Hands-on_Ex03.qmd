---
title: "Hands-on_Ex03"
author: "Siddharth Singh"
date: 25 January 2023
date-modified: "`r Sys.Date()`"
execute: 
  echo: true
  eval: true
  warning: false
format: html
editor: visual
---

# Loading Packages

```{r}
pacman::p_load(tidyverse, ggiraph, plotly, gganimate, gifski, gapminder, readxl, rPackedBar)
```

# Loading Exam Data

```{r}
exam_data <- read_csv('../data/Exam_data.csv')
```

# Interactive GGPlot

ggplot dot plot with tooltip as ID

```{r}
p <- ggplot(data = exam_data,
            aes(x = MATHS)) + 
  geom_dotplot_interactive(
    aes(tooltip=ID),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") + 
  scale_y_continuous(NULL, breaks = NULL)
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618
)
```

Custom Tooltip with custom CSS

```{r}
tooltip_css <- "background-color: white; font-style: bold; color: black;"
exam_data$tooltip <- c(paste0(
  "Name = ", exam_data$ID,
  "\n Class = ", exam_data$CLASS
))
p <- ggplot(data = exam_data,
            aes(x = MATHS)) + 
  geom_dotplot_interactive(
    aes(tooltip=exam_data$tooltip),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") + 
  scale_y_continuous(NULL, breaks = NULL)
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618,
  options = list(
    opts_tooltip(css=tooltip_css)
  )
)
```

Statistics on Tooltip

```{r}
tooltip <- function(y, ymax, accuracy=0.01){
  mean <- scales::number(y, accuracy=accuracy)
  sem <- scales::number(ymax - y, accuracy = accuracy)
  paste("Mean maths scores:", mean, "+/-", sem)
}

gg_point <- ggplot(data=exam_data, aes(x=RACE))+
  stat_summary(aes(y=MATHS, tooltip=after_stat(tooltip(y, ymax))),
               fun.data = "mean_se",
               geom = GeomInteractiveCol,
               fill="light blue"
  ) +
  stat_summary(aes(y = MATHS),
               fun.data = mean_se,
               geom = "errorbar", width=0.2, line_width=0.2)

girafe(ggobj=gg_point, width_svg = 8, height_svg = 8*0.618)
```

Interactive Tooltip

```{r}
p <- ggplot(data=exam_data,
            aes(x = MATHS)) + 
  geom_dotplot_interactive(
    aes(tooltip = CLASS, data_id = CLASS),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot"
  ) + 
  scale_y_continuous(NULL, 
                     breaks = NULL)

girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618,
  options = list(
    opts_hover(css = "opacity: #202020;"),
    opts_hover_inv(css = "opacity: 0.2;")
  )
)
```

On click functionality on dot

```{r}
exam_data$onclick <- sprintf("window.open(\"%s%s\")",
"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school",
as.character(exam_data$ID))
p <- ggplot(data=exam_data,
            aes(x = MATHS)) + 
  geom_dotplot_interactive(
    aes(onclick = onclick),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot"
  ) + 
  scale_y_continuous(NULL, 
                     breaks = NULL)

girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618
)
```

```{r}
p1 <-ggplot(data = exam_data,
            aes(x = MATHS)) + 
  geom_dotplot_interactive(aes(data_id = ID),
                           stackgroups = TRUE,
                           binwidth = 1,
                           method = "histodot") + 
  coord_cartesian(xlim=c(0,100)) + 
  scale_y_continuous(NULL, breaks = NULL)
```

```{r}
p2 <-ggplot(data = exam_data,
            aes(x = ENGLISH)) + 
  geom_dotplot_interactive(aes(data_id = ID),
                           stackgroups = TRUE,
                           binwidth = 1,
                           method = "histodot") + 
  coord_cartesian(xlim=c(0,100)) + 
  scale_y_continuous(NULL, breaks = NULL)

```

girafe(code = print(p1 / p2), width_svg = 6, height_svg = 6, options = list( opts_hover(css = "fill: #202020;"), opts_hover_inv(css = "opacity: 0.2;") ))

# "Plotly" to demo Interactive Visualisation

load data on plotly and use colors

```{r}
plot_ly(data = exam_data, 
        x = ~MATHS, y = ~ENGLISH, color = ~RACE, colors = "Set1")
```

Add colors to manually, Custom tooltip, Add title to visualisation.

```{r}
pal <- c("red", "purple", "blue", "green")
plot_ly(data = exam_data, 
        x = ~MATHS, y = ~ENGLISH, 
        text = ~paste("Student ID: ", ID,
                      "\nClass: ", CLASS),
        color = ~RACE, colors = pal) %>%
  layout(title = 'English Score vs Maths Score',
         xaxis = list(range = c(0,100)),
         yaxis = list(range = c(0,100)))
```

# Use ggplotly for interactive visualisation

```{r}
p <- ggplot(data=exam_data,
            aes(x = MATHS, y = ENGLISH)) + 
  geom_point(dotsize = 1) +
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100))
ggplotly(p)
```

Multiple ggplotly visualisation using subplot

```{r}
p1 <- ggplot(data = exam_data, aes(x = MATHS, y = ENGLISH)) + 
  geom_point(size = 1) + 
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100))

p2 <- ggplot(data = exam_data, aes(x = MATHS, y = SCIENCE)) + 
  geom_point(size = 1) + 
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100))

subplot(ggplotly(p1), ggplotly(p2))
```

highligh_key to provide coordination in multiple ggplotly visualisation

```{r}
d <- highlight_key(exam_data)
p1 <- ggplot(data = d, aes(x = MATHS, y = ENGLISH)) + 
  geom_point(size = 1) + 
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100))

p2 <- ggplot(data = d, aes(x = MATHS, y = SCIENCE)) + 
  geom_point(size = 1) + 
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100))

subplot(ggplotly(p1), ggplotly(p2))
```

# Datatable

```{r}
DT::datatable(exam_data, class="compact")
```

Highlight_key and bscols to provide coordination between table and ggplotly

```{r}
d <- highlight_key(exam_data)

p <- ggplot(d, aes(ENGLISH, MATHS)) + 
  geom_point(size=1) + 
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

gg <- highlight(ggplotly(p), "plotly_selected")

crosstalk::bscols(gg, DT::datatable(d), widths = 5)
```

# Animated Data Visualisation

Read and mutate excel data

```{r}
col <- c("Country", "Continent")

globalPop <- read_xls("../data/GlobalPopulation.xls", sheet = "Data") %>%
  mutate_each(funs(factor(.)), col) %>%
  mutate(Year = as.integer(Year))
```

ggplot to show geom_point plot visualisation

```{r}
ggplot(globalPop, aes(x = Old, y = Young, size = Population, color = Country)) +
  geom_point(alpha = 0.7, show.legend = FALSE) +
  scale_color_manual(values = country_colors) + 
  scale_size(range = c(2, 12)) +
  labs(title = "Year: {frame_time}",
       x = "% Aged",
       y = "% Young")
```

Add transation and ease animation

```{r}
ggplot(globalPop, aes(x = Old, y = Young, size = Population, colour = Country)) + 
  geom_point(alpha = 0.7, show.legend = FALSE) + 
  scale_colour_manual(values = country_colors) + 
  scale_size(range = c(2,12)) +
  labs(title = "Years: {frame_time}",
       x = "% Aged",
       y = "% Young") + 
  transition_time(Year) +
  ease_aes('linear')

```

# Visualising Large Data Interactively

Load data GDP and WorldCountry

```{r}
GDP <- read_csv('../data/GDP.csv')
WorldCountry <- read_csv('../data/WorldCountry.csv')
```

Mutate and join data

```{r}
GDP_selected <- GDP %>%
  mutate(Values = as.numeric(`2020`)) %>%
  select(1:3, Values) %>%
  pivot_wider(names_from = `Series Name`,
              values_from = `Values`) %>%
  left_join(y=WorldCountry, by = c("Country Code" = "ISO-alpha3 Code"))
```

Filter data and omit NA values

```{r}
GDP_selected <- GDP %>%
  mutate(GDP = as.numeric(`2020`)) %>%
  filter(`Series Name` == "GDP (current US$)") %>%
  select(1:2, GDP) %>%
  na.omit()
```

Plot packed bar visualisation

```{r}
p = plotly_packed_bar(
  input_data = GDP_selected,
  label_column = "Country Name",
  value_column = "GDP",
  number_rows = 10,
  plot_title = "Top 10 countries by GDP, 2020",
  xaxis_label = "GDP (US$)",
  hover_label = "GDP",
  min_label_width = 0.018,
  color_bar_color = "#00aced",
  label_color = "white")
plotly::config(p, displayModeBar = FALSE)
```
